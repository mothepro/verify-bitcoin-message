name: Auto Verify Bitcoin Messages

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  issues: write

jobs:
  run-and-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies, (postinstall runs build and test)
        id: install_deps
        run: |
          if ! bun install; then
            echo "INSTALL_FAILED=true" >> $GITHUB_OUTPUT
            exit 1
          fi
        continue-on-error: true

      - name: Close PR if install failed
        if: steps.install_deps.outputs.INSTALL_FAILED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå **PR Automatically Closed**
              See the output of the previous \`bun install\` step to see the error.`
            });

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            });

      - name: Run CLI and capture output
        id: run_output
        run: |
          echo "OUTPUT<<EOF" >> $GITHUB_OUTPUT
          bun run .github/workflows/generate-github-comments.ts >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Exit if install failed
        if: steps.install_deps.outputs.INSTALL_FAILED == 'true'
        run: exit 1

      - name: Comment PR with output
        uses: actions/github-script@v7
        with:
          script: |
            let count = 0;
            const limit = 75;
            const existingSignatures = new Set();
            const comments = `${{ steps.run_output.outputs.OUTPUT }}`.split('\n\n\n').filter(Boolean);
            const signatures = JSON.parse(comments.pop());
            const existingComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            for (const [index, signature] of signatures.entries()) {
              existingSignatures.add(signature);
              const hasComment = existingComments.data.find(comment => comment.body.includes(signature))
              if (hasComment) continue;
              const body = comments[index]
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
              if (count++ >= limit) {
                console.error(`Reached comment limit of ${limit}, in the future this may fail. Try to upload messages in smaller batches.`)
                break;
              }
            }
